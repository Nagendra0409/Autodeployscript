#Install Nginx Server 
sudo apt install nginx -y 

#Install php with packages 
sudo apt install --no-install-recommends php8.1 -y
sudo apt-get install -y php8.1-cli php8.1-common php8.1-mysql php8.1-zip php8.1-gd php8.1-mbstring php8.1-curl php8.1-xml php8.1-bcmath php8.1-fpm

# Install Composer (Php package manager)

curl -sS https://getcomposer.org/installer -o /tmp/composer-setup.php 

HASH=`curl -sS https://composer.github.io/installer.sig` 

echo $HASH

php -r "if (hash_file('SHA384', '/tmp/composer-setup.php') === '$HASH') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;" sudo php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer 

composer

#Install MySQL Database
sudo apt install mysql-server -y
sudo mysql 
ALTER USER 'root @ localhost' IDENTIFIED WITH mysql_native_password BY 'password';


#Install phpmyadmin and configure with nginx server 
sudo apt install phpmyadmin -y
sudo ln -s /usr/share/phpmyadmin /var/www/html/phpmyadmin

#Check Permissions: 
sudo chown -R www-data:www-data /var/www/html/phpmyadmin 
sudo chmod -R 755 /var/www/html/phpmyadmin 
sudo chown -R www-data:www-data /var/www/html

#Update this code in /etc/nginx/sites-enabled/default:

cd ../
cd ../
cd /etc/nginx/sites-enabled/
sudo nano default 

##
# You should look at the following URL's in order to grasp a solid understandi>
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;
        server_name _;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }

        # pass PHP scripts to FastCGI server
        #
        #location ~ \.php$ {
        #       include snippets/fastcgi-php.conf;
        #
        #       # With php-fpm (or other unix sockets):
        #       fastcgi_pass unix:/run/php/php7.4-fpm.sock;
        #       # With php-cgi (or other tcp sockets):
        #       fastcgi_pass 127.0.0.1:9000;
        #}
        location /phpmyadmin {
        root /var/www/html;
        index index.php index.html index.htm;

        location ~ ^/phpmyadmin/(.+\.php)$ {
                try_files $uri =404;
                root /var/www/html;
                fastcgi_pass unix:/run/php/php8.1-fpm.sock;
                fastcgi_index index.php;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                include /etc/nginx/fastcgi_params;
        }

        location ~* ^/phpmyadmin/(.+\.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt))$ {
                        root /var/www/html;
        }
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #       deny all;
        #}
}

# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#       listen 80;
#       listen [::]:80;
#
#       server_name example.com;
#
#       root /var/www/example.com;
#       index index.html;
#
#       location / {
#               try_files $uri $uri/ =404;
#       }
#}

	
sudo systemctl restart nginx
sudo systemctl restart php8.1-fpm

#Prepare the server:
#Install Nginx:
	 
 	sudo apt update
 	sudo apt install nginx
	 

#Install PHP and required extensions:
	 
 	sudo apt install php php-fpm php-mbstring php-xml php-zip php-mysql
	 

#Install Composer (a dependency manager for PHP):
	 
 	sudo apt install composer

#Clone your Laravel project:
#Navigate to the directory where you want to clone your project:
	 
 	cd /var/www/html
	 

#Clone your Laravel project repository:
	 
 	sudo git clone https://github.com/Nagendra0409/laravel.git laravel
	 

#Navigate into the project directory:
	 
 	cd laravel
 	
#Install project dependencies:
#Install the project dependencies using Composer:
	 
 	sudo composer install --optimize-autoloader --no-dev
	 
#Configure Nginx for your Laravel project:
#Create a new Nginx server block configuration file:
	 
 	sudo nano /etc/nginx/sites-available/laravel
 	
#Add the following content to the file:

 	server {
     	listen 80;
     	listen [::]:80;
     	server_name 35.154.61.200;

     	root /var/www/html/laravel/public;
     	index index.php;

     	location / {
         	try_files $uri $uri/ /index.php?$query_string;
     	}

     	location ~ \.php$ {
         	include snippets/fastcgi-php.conf;
         	fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
     	}
 	}

#Enable the Nginx server block:
#Create a symbolic link to enable the server block:
	 
 	sudo ln -s /etc/nginx/sites-available/laravel /etc/nginx/sites-enabled/

#Adjust file permissions and ownership:
#Set the ownership of the Laravel project directory to the web server user:
	 
 	sudo chown -R www-data:www-data /var/www/html/laravel

#Set appropriate permissions for Laravel directories:
	 
 	sudo chmod -R 755 /var/www/html/laravel/storage
 	sudo chmod -R 755 /var/www/html/laravel/bootstrap/cache

#Test the Nginx configuration and restart Nginx:
#Test the Nginx configuration for syntax errors:
	 
 	sudo nginx -t
	 

#If the configuration test is successful, restart Nginx:
	 
 	sudo service nginx restart
 	
#Set up your Laravel environment:
#Generate the application key:
	 
sudo php artisan key:generate